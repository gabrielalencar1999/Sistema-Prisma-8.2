name: Build and Deploy Application ðŸš€
on: 
  push:
    branches:
      - production
      - staging

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Images ðŸ’½
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
        
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Configure Docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker Nginx
      uses: docker/build-push-action@v6
      env:
        ECR_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
        AWS_ECR_PATH: ${{ vars.AWS_ECR_PATH }}
        IMAGE_TAG: ${{ github.run_number }}
        LTS_TAG: lts-${{ github.ref_name }}
        TAG: ${{ github.ref_name }}-${{ github.run_number }}
        ENVIRONMENT: ${{ github.ref_name }}
      with:
          context: .
          file: ./docker/nginx/Dockerfile
          platforms: linux/amd64
          provenance: false
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_PATH }}/nginx:${{ env.TAG }},
            ${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_PATH }}/nginx:${{ env.LTS_TAG }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_PATH }}/nginx:cache
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_PATH }}/nginx:cache

    - name: Build and push Docker Web
      uses: docker/build-push-action@v6
      env:
        ECR_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
        AWS_ECR_PATH: ${{ vars.AWS_ECR_PATH }}
        IMAGE_TAG: ${{ github.run_number }}
        LTS_TAG: lts-${{ github.ref_name }}
        TAG: ${{ github.ref_name }}-${{ github.run_number }}
        ENVIRONMENT: ${{ github.ref_name }}
      with:
          context: .
          file: ./docker/web/Dockerfile
          platforms: linux/amd64
          provenance: false
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_PATH }}/web:${{ env.TAG }},
            ${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_PATH }}/web:${{ env.LTS_TAG }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_PATH }}/web:cache
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ env.ECR_REGISTRY }}/${{ env.AWS_ECR_PATH }}/web:cache    

  deploy:
    name: Deploy App ðŸš€
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
  

    - name: Replace docker-compose
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
        AWS_ECR_PATH: ${{ vars.AWS_ECR_PATH }}
        TAG: ${{ github.ref_name }}-${{ github.run_number }}
      run: |
        envsubst < ./aws/docker-compose.yml > ./aws/docker-compose.yml.tmp
        mv ./aws/docker-compose.yml.tmp ./aws/docker-compose.yml

    - name: Generate and upload zip
      working-directory: ./aws
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_BUCKET: elasticbeanstalk-${{ vars.AWS_REGION }}-${{ vars.AWS_ACCOUNT_ID }}
        ZIP_FILE: ${{ vars.AWS_ECR_PATH }}-${{ github.ref_name }}-${{ github.run_number }}.zip
        TAG: ${{ github.ref_name }}-${{ github.run_number }}
      run: |
          zip -r ${ZIP_FILE} ./docker-compose.yml ./.ebextensions/*
          aws s3 cp $ZIP_FILE s3://${AWS_BUCKET}/${ZIP_FILE} --region ${AWS_REGION}

    - name: Deploy Beanstalk
      working-directory: ./aws
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
        AWS_ECR_PATH: ${{ vars.AWS_ECR_PATH }}
        AWS_BUCKET: elasticbeanstalk-${{ vars.AWS_REGION }}-${{ vars.AWS_ACCOUNT_ID }}
        AWS_BEANSTALK_APP: ${{ vars.AWS_ECR_PATH }}-apps
        AWS_BEANSTALK_ENVIRONMENT: ${{ vars.AWS_ECR_PATH }}-${{ github.ref_name }}-env
        ZIP_FILE: ${{ vars.AWS_ECR_PATH }}-${{ github.ref_name }}-${{ github.run_number }}.zip
        TAG: ${{ github.ref_name }}-${{ github.run_number }}
      run: |
          aws elasticbeanstalk create-application-version --application-name ${AWS_BEANSTALK_APP} \
            --version-label ${TAG} --source-bundle S3Bucket=${AWS_BUCKET},S3Key=$ZIP_FILE --region ${AWS_REGION}
          aws elasticbeanstalk update-environment --environment-name ${AWS_BEANSTALK_ENVIRONMENT} \
            --version-label ${TAG} --region ${AWS_REGION}

    - name: Waiting update
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_BEANSTALK_ENVIRONMENT: ${{ vars.AWS_ECR_PATH }}-${{ github.ref_name }}-env
      run: |
          aws elasticbeanstalk wait environment-updated --environment-name ${AWS_BEANSTALK_ENVIRONMENT} --region ${AWS_REGION}

    - name: Get Logs on Failure
      if: failure()
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_BEANSTALK_ENVIRONMENT: ${{ vars.AWS_ECR_PATH }}-${{ github.ref_name }}-env
      run: |
          aws elasticbeanstalk request-environment-info --environment-name ${AWS_BEANSTALK_ENVIRONMENT} --info-type tail --region ${AWS_REGION}
          sleep 10
          aws elasticbeanstalk retrieve-environment-info --environment-name ${AWS_BEANSTALK_ENVIRONMENT} --info-type tail --region ${AWS_REGION}